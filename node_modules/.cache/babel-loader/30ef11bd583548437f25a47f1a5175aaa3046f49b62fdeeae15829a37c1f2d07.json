{"ast":null,"code":"var _jsxFileName = \"/Users/jeongseogmin/Desktop/NEXT/greenlink/Greenlink/frontend/src/pages/NotifiPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport TopNav from \"../componenets/TopNav\";\nimport setting_icon from \"../assets/Setting_Icon.png\";\nimport x_icon from \"../assets/X_Icon.png\";\nimport MainNav from \"../componenets/MainNav\";\nimport { NotifiText } from \"./PlantPage1\";\nimport styles from \"./NotifiPage.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NotifiBox({\n  item\n}) {\n  function calculateTime(created_at) {\n    const now = new Date();\n    const createdTime = new Date(created_at);\n    const diffInSeconds = Math.floor((now - createdTime) / 1000);\n    if (diffInSeconds < 60) {\n      return \"지금\";\n    } else if (diffInSeconds < 3600) {\n      return `${Math.floor(diffInSeconds / 60)}분 전`;\n    } else if (diffInSeconds < 86400) {\n      return `${Math.floor(diffInSeconds / 3600)}시간 전`;\n    } else if (diffInSeconds < 2592000) {\n      return `${Math.floor(diffInSeconds / 86400)}일 전`;\n    } else {\n      return `${Math.floor(diffInSeconds / 2592000)}달 전`;\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.notifibox,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.noti\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.content,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: calculateTime(item.created_at)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NotifiText, {\n        context: item.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, item.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_c = NotifiBox;\nfunction NotifiList({\n  items\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.notiilist,\n    children: items.map(item => {\n      return /*#__PURE__*/_jsxDEV(NotifiBox, {\n        item: item\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_c2 = NotifiList;\nfunction NotifiPage() {\n  _s();\n  const [items, setItems] = useState([]); // 초기값을 빈 배열로 설정\n\n  useEffect(() => {\n    fetch(\"data/notifi.json\").then(response => response.json()).then(data => setItems(data)).catch(error => console.error(error));\n  }, []); // 빈 의존성 배열을 전달하여 컴포넌트가 마운트될 때 한 번만 실행\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TopNav, {\n      text: \"\\uC54C\\uB9BC\",\n      link1: \"/setting\",\n      link2: \"/plant1\",\n      icon1: setting_icon,\n      icon2: x_icon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NotifiList, {\n      items: items\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MainNav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(NotifiPage, \"E85yb7BhBnl3/OpymRdjFiQJ97s=\");\n_c3 = NotifiPage;\nexport default NotifiPage;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"NotifiBox\");\n$RefreshReg$(_c2, \"NotifiList\");\n$RefreshReg$(_c3, \"NotifiPage\");","map":{"version":3,"names":["React","useEffect","useState","TopNav","setting_icon","x_icon","MainNav","NotifiText","styles","jsxDEV","_jsxDEV","NotifiBox","item","calculateTime","created_at","now","Date","createdTime","diffInSeconds","Math","floor","className","notifibox","children","noti","fileName","_jsxFileName","lineNumber","columnNumber","content","context","message","id","_c","NotifiList","items","notiilist","map","_c2","NotifiPage","_s","setItems","fetch","then","response","json","data","catch","error","console","text","link1","link2","icon1","icon2","_c3","$RefreshReg$"],"sources":["/Users/jeongseogmin/Desktop/NEXT/greenlink/Greenlink/frontend/src/pages/NotifiPage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport TopNav from \"../componenets/TopNav\";\r\nimport setting_icon from \"../assets/Setting_Icon.png\";\r\nimport x_icon from \"../assets/X_Icon.png\";\r\nimport MainNav from \"../componenets/MainNav\";\r\nimport { NotifiText } from \"./PlantPage1\";\r\nimport styles from \"./NotifiPage.module.css\";\r\n\r\nfunction NotifiBox({ item }) {\r\n  function calculateTime(created_at) {\r\n    const now = new Date();\r\n    const createdTime = new Date(created_at);\r\n    const diffInSeconds = Math.floor((now - createdTime) / 1000);\r\n\r\n    if (diffInSeconds < 60) {\r\n      return \"지금\";\r\n    } else if (diffInSeconds < 3600) {\r\n      return `${Math.floor(diffInSeconds / 60)}분 전`;\r\n    } else if (diffInSeconds < 86400) {\r\n      return `${Math.floor(diffInSeconds / 3600)}시간 전`;\r\n    } else if (diffInSeconds < 2592000) {\r\n      return `${Math.floor(diffInSeconds / 86400)}일 전`;\r\n    } else {\r\n      return `${Math.floor(diffInSeconds / 2592000)}달 전`;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={styles.notifibox} key={item.id}>\r\n      <div className={styles.noti}></div>\r\n      <div className={styles.content}>\r\n        <div>{calculateTime(item.created_at)}</div>\r\n        <NotifiText context={item.message} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction NotifiList({ items }) {\r\n  return (\r\n    <div className={styles.notiilist}>\r\n      {items.map((item) => {\r\n        return <NotifiBox item={item} />;\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction NotifiPage() {\r\n  const [items, setItems] = useState([]); // 초기값을 빈 배열로 설정\r\n\r\n  useEffect(() => {\r\n    fetch(\"data/notifi.json\")\r\n      .then((response) => response.json())\r\n      .then((data) => setItems(data))\r\n      .catch((error) => console.error(error));\r\n  }, []); // 빈 의존성 배열을 전달하여 컴포넌트가 마운트될 때 한 번만 실행\r\n\r\n  return (\r\n    <div>\r\n      <TopNav\r\n        text=\"알림\"\r\n        link1=\"/setting\"\r\n        link2=\"/plant1\"\r\n        icon1={setting_icon}\r\n        icon2={x_icon}\r\n      />\r\n      <NotifiList items={items} />\r\n\r\n      <MainNav />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NotifiPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}